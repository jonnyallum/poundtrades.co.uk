// screens/Dashboard.js
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { useAuth } from '../lib/auth';
import { db } from '../lib/firebase';
import {
  collection,
  query,
  where,
  getDocs,
  deleteDoc,
  doc,
} from 'firebase/firestore';
import ListingCard from '../components/ListingCard';

const Dashboard = ({ navigation }) => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState('myListings');
  const [listings, setListings] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchListings = async () => {
    setLoading(true);
    try {
      let q;
      if (activeTab === 'myListings') {
        q = query(collection(db, 'listings'), where('userId', '==', user.uid));
      } else if (activeTab === 'boosted') {
        q = query(
          collection(db, 'listings'),
          where('userId', '==', user.uid),
          where('boosted', '==', true)
        );
      } else {
        // Favourites tab
        const favRef = collection(db, `users/${user.uid}/favourites`);
        const snapshot = await getDocs(favRef);
        const favs = snapshot.docs.map((doc) => doc.data());
        setListings(favs);
        setLoading(false);
        return;
      }

      const snapshot = await getDocs(q);
      const results = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setListings(results);
    } catch (err) {
      Alert.alert('Error', err.message);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchListings();
  }, [activeTab]);

  const handleDelete = async (listingId) => {
    Alert.alert('Confirm', 'Delete this listing?', [
      { text: 'Cancel' },
      {
        text: 'Delete',
        onPress: async () => {
          await deleteDoc(doc(db, 'listings', listingId));
          fetchListings();
        },
      },
    ]);
  };

  return (
    <View className="flex-1 bg-black pt-8 px-4">
      <Text className="text-yellow-400 text-2xl font-bold mb-4">My Dashboard</Text>

      <View className="flex-row justify-between mb-4">
        {[
          { label: 'My Listings', key: 'myListings' },
          { label: 'Favourites', key: 'favourites' },
          { label: 'Boosted', key: 'boosted' },
        ].map((tab) => (
          <TouchableOpacity
            key={tab.key}
            onPress={() => setActiveTab(tab.key)}
            className={`px-4 py-2 rounded-xl ${
              activeTab === tab.key ? 'bg-yellow-500' : 'bg-gray-800'
            }`}
          >
            <Text className="text-black font-bold">{tab.label}</Text>
          </TouchableOpacity>
        ))}
      </View>

      {loading ? (
        <ActivityIndicator size="large" color="#facc15" />
      ) : listings.length === 0 ? (
        <Text className="text-white text-center mt-20">No listings found.</Text>
      ) : (
        <ScrollView>
          <View className="flex-row flex-wrap justify-between">
            {listings.map((item) => (
              <View key={item.id} className="w-[48%] mb-4">
                <ListingCard
                  image={item.image}
                  title={item.title}
                  price={item.price}
                  sellerType={item.sellerType}
                  onPress={() =>
                    navigation.navigate('ListingDetails', { listing: item })
                  }
                />
                {activeTab === 'myListings' && (
                  <TouchableOpacity
                    onPress={() => handleDelete(item.id)}
                    className="bg-red-700 py-2 mt-2 rounded-xl"
                  >
                    <Text className="text-white text-center">Delete</Text>
                  </TouchableOpacity>
                )}
              </View>
            ))}
          </View>
        </ScrollView>
      )}
    </View>
  );
};

export default Dashboard;

Whatâ€™s Included:

Tabs for My Listings, Favourites, and Boosted

Dynamic Firestore queries depending on tab

Delete button only shows under My Listings

Yellow/black colour scheme throughout

Responsive scrollable grid